ppois(10,15)
?ppois
?pnorm
pnorm(14:16, 15, 10)
pnorm(13, 15, 10)
pnorm(16, 15, 10)
?pbino,
?pbinom
pbinom(3,5,0.5,lower.tail = FALSE)
pbinom(3,5,0.5)
ppois(20,33)
pbinom(4,6,0.5,lower.tail = FALSE)
round((ppois(20,33))*100),1)
round((ppois(20,33)*100),1)
pnorm(93, 100, 10)
round(qbinom(.95,100,10),3)
round(qbinom(95,100,10),3)
?qnorm
round(qnorm(.95,100,10),3)
round(qnorm(.95, 100, sqrt(100/50)),3)
round((pnorm(93, 100 10)))*100,1)
round((pnorm(93, 100 10))*100,1)
round(((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100, 10))*100),1)
round(((pnorm(93, 100, 10))*100),1)
round((punif(.51, mean=0.5, sd=1/10*sqrt(12))),3)
round((qunif(.51, mean=0.5, sd=1/10*sqrt(12))),3)
?punif
round(pnorm(.51, mean=0.5, sd=1/10*sqrt(12), lower.tail = FALSE),3)
round(pnorm(.51, mean=0.5, sd=1/(10*sqrt(12)), lower.tail = FALSE),3)
library(XML)
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html ", useInternalNodes = T)
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html ")
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes = T)
data1
?xpathSApply
?nchar
nchar(data1,10)
data1[10]
?xpathSApply
pbinom(5:7, 8, 0.5)
qnorm(1160,1020,50)
?qnorm
pnorm(1160,1020,50)
pnorm(1160,1020,50, lower.tail = FALSE)
library(httr)
myapp = oauth_app("github", key="168fadf641afa8069767", secret="39ea733559b43a3ffd9268c1e450dce3f423ce8f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
homeTL <- GET("https://api.github.com/users/jtleek/repos", gtoken)
ab <- content(homeTL)
ab1 <- jsonlite::fromJSON(toJSON(ab))
print(ab1[1,1:4])
library(jsonlite)
gtoken <- config(token = github_token)
homeTL <- GET("https://api.github.com/users/jtleek/repos", gtoken)
ab <- content(homeTL)
ab1 <- jsonlite::fromJSON(toJSON(ab))
print(ab1[1,1:4])
class(ab1)
colnames(ab1)
ab1[ab1$name=="datasharing",]
ab1[ab1$name=="datasharing","created_at"]
?t.test
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")$p.value
View(OJdata)
View(VCdata)
?ToothGrowth
means
t.test(data_1_OJ,data_0.5_OJ,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
t.test(data_2_OJ,data_1_OJ,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
t.test(data_2_OJ,data_1_OJ,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
t.test(data_2_VC,data_1_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
MeanSDdata <- c("All observations", "Orange Juice any dose", "Ascorbic Acid any dose");
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg any supp", "1 mg any supp", "2 mg any supp"));
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg OJ", "1 mg OJ", "2 mg OJ"));
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg VC", "1 mg VC", "2 mg VC"));
MeanSDdata
MeanSDdata <- rbind("All observations", "Orange Juice any dose", "Ascorbic Acid any dose");
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg any supp", "1 mg any supp", "2 mg any supp"));
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg OJ", "1 mg OJ", "2 mg OJ"));
MeanSDdata <- rbind(MeanSDdata, c("0.5 mg VC", "1 mg VC", "2 mg V")
MeanSDdata <- rbind("All observations", "Orange Juice any dose", "Ascorbic Acid any dose");
MeanSDdata
MeanSDdata <- rbind("All observations", "Orange Juice any dose", "Ascorbic Acid any dose")
MeanSDdata <- rbind(MeanSDdata, "0.5 mg any supp", "1 mg any supp", "2 mg any supp")
MeanSDdata <- rbind(MeanSDdata, "0.5 mg OJ", "1 mg OJ", "2 mg OJ")
MeanSDdata <- rbind(MeanSDdata, "0.5 mg VC", "1 mg VC", "2 mg VC")
MeanSDdata
MeanSDdata
c(AllMeans, OJmeanAnyDose, VCmeanAnyDose, Dose_0.5_Mean, Dose_1_Mean, Dose_2_Mean,
means)
c(AllMeans, OJmeanAnyDose, VCmeanAnyDose, Dose_0.5_Mean, Dose_1_Mean, Dose_2_Mean,
means)
View(MeanSDdata)
sample_var
MeanSDdata <- cbind(MeanSDdata, c(AllSampleVar, OJSampleVarAnyDose, VCSampleVarAnyDose, Dose_0.5_SampleVar,
Dose_1_SampleVar, Dose_2_SampleVar, sample_var))
MeanSDdata
means <- c(OJMeanPerDose,VCMeanPerDose);
means
OJMeanPerDose <- tapply(OJdata$len, factor(OJdata$dose), mean)
OJSampleVarPerDose <- 10*tapply(OJdata$len, factor(OJdata$dose), var) /(10-1)
VCMeanPerDose <- tapply(VCdata$len, factor(VCdata$dose), mean)
VCSampleVarPerDose <- 10*tapply(VCdata$len, factor(VCdata$dose), var) /(10-1)
means <- c(OJMeanPerDose,VCMeanPerDose);
MeanSDdata <- cbind(MeanSDdata, c(AllMeans, OJmeanAnyDose, VCmeanAnyDose, Dose_0.5_Mean, Dose_1_Mean, Dose_2_Mean,
means))
MeanSDdata
colnames(MeanSDdata) <- c("Type", "Sample Variance", "Mean")
MeanSDdata
install.packages(knitr)
library(knitr)
?kable()
kable(MeanSDdata, format="markdown")
rownames(MeanSDdata) <- NULL
MeanSDdata
rownames(MeanSDdata) <- 1:12
means
MeanSDdata
library(devtools)
install_github('pander', 'Rapporter')
pander(MeanSDdata, style="rmarkdown")
library(pander)
pander(MeanSDdata, style="rmarkdown")
install.packages(c("BH", "htmltools"))
?t.test
1100+c(-1,1)*qnorm(0.975)*30
1100+c(-1,1)*qnorm(0.975)*30/9
1100+c(-1,1)*qnorm(0.975)*30/3
2/qnorm(0.957)
2*3/qnorm(0.957)
1100+qnorm(0.975)*30/3
2*3/qnorm(0.975)
(2*3)/qnorm(0.975)
(2*sqrt(8))/qnorm(0.975)
(2*3)/qnorm(0.975,8)
1100+c(-1,1)*qt(0.975)*30/3
?qt
1100+c(-1,1)*qt(0.975,8)*30/3
(2*3)/qt(0.975,8)
t.test(3-5)$ci
t.test(3,5,paired = FALSE, var.equal = FALSE)$conf
sp <- sqrt((10-1)*0.6 + 9*0.68)/(18)
md <- 3-5
semd <- sp*sqrt(1/10 + 1/10)
md+c(-1,1)*qt(0.975,18)*semd
sp <- sqrt((10-1)*0.6 + 9*0.68/(18))
semd <- sp*sqrt(1/10 + 1/10)
md+c(-1,1)*qt(0.975,18)*semd
semd <- sp*sqrt(1/5)
semd <- sp*sqrt(1/10 + 1/10)
sp <- sqrt(0.64)
semd <- sp*sqrt(1/10 + 1/10)
md+c(-1,1)*qt(0.975,18)*semd
?z.test
sp <- sqrt(4.25/2)
semd <- sp*sqrt(1/50)
md <- 6-4
md+c(-1,1)*1.96*semd
md <- -3-1
sp <- sqrt((2.25+3.24)/2)
semd <- sp*sqrt(2/9)
md+c(-1,1)*qt(0.975,16)*semd
1.8^2
1.5^2
sqrt(5.49/2)
md+c(-1,1)*qt(0.95,16)*semd
gp1<-c(140,138,150,148,135)
gp2<-c(132,135,151,146,130)
t.test(gp1,gp2,var.equal = TRUE, paired = TRUE, two.sided)
?t.test
t.test(gp1,gp2,var.equal = TRUE, paired = TRUE, alternative="two.sided")$p.value
t.test(gp1,gp2,var.equal = FALSE, paired = TRUE, alternative="two.sided")$p.value
1100+c(-1,1)*qt(.95,8)*10
qt(0.95*8)
qt(0.95,8)
?binom.test
library(swirl)
swirl()
?InstallCourses
install_from_swirl(Regression_Models)
install_from_swirl("Regression_Models")
swirl()
install.packages("UsingR")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w/sum(w)
sum(x*w)/sum(w)
data(mtcars)
lm(mpg~weight, data=mtcars)
names(mtcars)
lm(mpg~wt, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
std <- sd(x)
x-mean(x)
x-mean(x)/std
(x-mean(x))/std
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~rep(1,length(x)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05
)
lm(y~x)
swirl()
library(swirl)
swirl()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,
| galton)
regrline <- lm(child ~ parent,
galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
source('~/R/win-library/3.2/swirl/Courses/Regression_Models/Least_Squares_Estimation/slopedemo_no_mani.R')
source('~/R/win-library/3.2/swirl/Courses/Regression_Models/Least_Squares_Estimation/slopedemo_no_mani.R')
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
library*swirl
library(swirl)
swirl()
ones <- rep(1.nrow(galton))
ones <- rep(1,nrow(galton))
lm(child~ones+parent-1,galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth+Height+Constant-1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume~Height+Constant-1, trees2)
lapply(list(fit, fit2), coef)
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height +
| Constant -1, trees2)
fit2 <- lm(Volume ~ Height +
Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility~Agriculture, swiss)
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination+swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec, swiss)
efit$coefficients-all$coefficients
all$coefficients-efit$coefficients
rm.all
rm(swiss,trees,trees2,all,ec,fit,fit2,efit)
rm(galton,ones,eliminate,makelms)
rm(regressOneOnOne(,rgp1,rgp2))
rm(regressOneOnOne,rgp1,rgp2)
clr()
data(mtcars)
head(mtcars)
fit <- lm(mpg~factor(cyl)+wt,mtcars)
summary(fit)$coef
fit1 <- lm(mpg~factor(cyl),mtcars)
summary(fit1)$coef
fit2 <- lm(mpg~factor(cyl)+wt+factor(cyl)*wt,mtcars)
summary(fit2)
fit3 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
hatvalues(lm(y~x))
?dfbeta
dfbeta(lm(y~x))
dfbetas(lm(y~x))
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit$residuals)/fit$df.residual)
sigma <- sqrt((deviance(fit$residuals))/fit$df.residual)
summary(fit)
sigma <- sqrt((deviance(fit))/fit$df.residual)
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt((deviance(fitno))/fitno$df.residual)
resid(fit)[1]/(sigma*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
(sum(dy^2))/(2*sigma^2)
plot(fit, which=5)
swirl()
data(mtcars)
fit1 <- lm(mpg~cyl+wt, mtcars)
summary(fit1)
fit2 <- lm(mpg~factor(cyl)+wt, mtcars)
summary(fit2)
fit3 <- lm(mpg~factor(cyl)+wt-1, mtcars)
summary(fit3)
data(swiss)
head(swiss)
plot(swiss$Fertility, swiss$Agriculture)
plot(swiss$Agriculture, swiss$Fertility)
fit<-lm(Fertility~Agriculture, swiss)
plot(lm, which=1)
plot(lm)
plot(swiss$Agriculture, swiss$Fertility)
st <- [1:20,100]
st <- c(1:20,100)
xt <- c(1:10, 100)
ggplot(xt,st)
library(ggplot2)
ggplot(xt,st)
ggplot(data.frame(x=xt,y=st), aes(x=x,y=y))
st <- c(1:10,50)
ggplot(data.frame(x=xt,y=st), aes(x=x,y=y))
g <- ggplot(data.frame(x=xt,y=st), aes(x=x,y=y))
g <- g+geom_point()
g
g <- g+geom_line(lm(y~x))
g <- g+geom_line(lm(st~xt))
g <- g+geom_line(lm(st~xt), aes(x=xt,y=st))
g <- g+geom_smooth(lm)
g <- g+geom_smooth(lm(st~xt))
g <- g+geom_smooth(lm(st~xt), aes(y=st,x=xt))
df =data.frame(x=xt,y=st)
g <- g+geom_smooth(lm(st~xt), df
)
g <- g+geom_smooth(lm(y~x,df), aes(y=df$y,x=df$x))
g
g <- g+geom_smooth(method=lm, aes(y=df$y,x=df$x))
g
g <- g+geom_smooth(method=lm, se=False, aes(y=df$y,x=df$x))
g <- g+geom_smooth(method=lm, se="False", aes(y=df$y,x=df$x))
g
hatvalues(df)
fit<-lm(y~x,df)
hatvalues(fit)
dfbetas(fit)
cooks.distance(fit)
rstandard(fit)
rstudent(fit)
resid(fit)
resid(fit)/(1-hatvalues(fit))
fit1<-lm(y~x,df[-11,])
resid(fit)
resid(fit)
resid(fit1)
hatvalues(fit1)
dfbetas(fit1)
plot(resid(fit),df$y)
plot(df$y,resid(fit))
---
title       : Multivariable regression examples
library(swirl)
swirl()
install.packages("car")
swirl()
swirl()
library(car)
install.packages("pbkrtest")
install.packages("installr")
library(installr)
updateR()
install.packages("kernlab")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("manipulate")
require(devtools)
install_github('ramnathv/rCharts')
library(slidify)
installed.packages()
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv/slidify")
install_github("slidifyLibraries","ramnathv")
library(slifidy)
library(slidify)
install_github("ropensci/plotly")
library(plotly)
library(installr)
updateR()
library(shiny)
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
getwd()
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
runApp('Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip')
setwd("~/Personal/Coursera/Course_8_Developing Data Products/ShinyApps/Best_Car_for_your_Trip")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Personal/Coursera/Course_8_Developing Data Products")
setwd("~/Personal/Coursera/Course_8_Developing Data Products/ShinyApp")
runApp()
install.packages("BH")
runApp()
runApp()
